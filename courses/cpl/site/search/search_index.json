{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This course, Computer Programming Language, introduces students to the fundamentals of Python programming. We begin with essential programming concepts, then explore how to visualize data through Python. The course further demonstrates how Python can be applied to machine learning and concludes with practical examples in physics and materials science, equipping students with programming skills relevant to modern scientific research.</p> <p>If you have corrections or suggestions, please raise an comment on our Github.</p>"},{"location":"contents/","title":"Contents","text":"<ol> <li> <p>Introduction to Python Programming   </p> <ul> <li>Overview of Python and its applications in science and engineering</li> </ul> </li> <li> <p>Setting Up the Development Environment</p> <ul> <li>Hands-on with VS Code and JupyterLab</li> <li>Simple practices for writing and running Python code</li> </ul> </li> <li> <p>Basic Python Programming </p> <ul> <li>Variables, data types, strings, lists, dictionaries</li> <li>Conditional statements and loops</li> <li>Writing and using functions, etc.</li> </ul> </li> <li> <p>Intermediate and Advanced Python</p> <ul> <li>Introduction to classes and object-oriented programming</li> <li>Common algorithms: sorting, searching, and recursion</li> <li>File I/O and exception handling, etc.</li> </ul> </li> <li> <p>Data Visualization with Matplotlib</p> <ul> <li>Introduction to Matplotlib and plotting basics</li> <li>Creating effective and publication-quality scientific plots</li> <li>Introduction to other libraries (e.g., Seaborn, etc.)</li> </ul> </li> <li> <p>Introduction to Machine Learning and Neural Networks</p> <ul> <li>Key concepts in machine learning</li> <li>Architecture of artificial neural networks (ANNs)</li> </ul> </li> <li> <p>Architecture of artificial neural networks (ANNs)</p> <ul> <li>Implementing a basic ANN using only Python and NumPy</li> <li>Hands-on training and testing with small datasets</li> </ul> </li> <li> <p>Advanced Neural Networks with TensorFlow or PyTorch</p> <ul> <li>Building deep neural networks with TensorFlow or PyTorch</li> <li>Training, evaluation, and model optimization</li> </ul> </li> <li> <p>Python for Materials Science</p> <ul> <li>Introduction to computational materials science</li> <li>Using Python to preprocess, postprocess, and visualize DFT data</li> <li>Practical example: analyzing band structures or density of states</li> </ul> </li> </ol>"},{"location":"lecture1/","title":"1. Introduction Python","text":""},{"location":"lecture1/#1-introduction-python","title":"1. Introduction Python\u00b6","text":""},{"location":"lecture1/#11-getting-started","title":"1.1. \ud83d\udc4b Getting started\u00b6","text":"<p>Welcome to our first lecture!</p>"},{"location":"lecture1/#what-is-a-programming-language","title":"\ud83d\udcd8 What Is a Programming Language?\u00b6","text":"<p>A programming language is a structured way to communicate instructions in a way computers can understand. It allows humans to write commands that computers can interpret and execute.</p> <p>There are many programming languages. But like spoken languages, some programming languages are easier to learn than others \u2014 and Python is one of the most beginner-friendly.</p>"},{"location":"lecture1/#key-characteristics","title":"\ud83d\udccb Key Characteristics\u00b6","text":""},{"location":"lecture1/#-syntax","title":"- Syntax:\u00b6","text":"<p>The rules that define the structure and format of code. Example: <code>if (x &gt; 0) { ... }</code> is valid syntax in many languages.</p>"},{"location":"lecture1/#-semantics","title":"- Semantics:\u00b6","text":"<p>The meaning behind the syntax\u2014what the code does when run.</p>"},{"location":"lecture1/#-abstractions","title":"- Abstractions:\u00b6","text":"<p>Features like variables, functions, loops, and objects that help programmers build complex systems more easily.</p>"},{"location":"lecture1/#types-of-programming-languages","title":"\ud83e\udde9 Types of Programming Languages\u00b6","text":""},{"location":"lecture1/#high-level-languages","title":"\ud83d\udd39 High-Level Languages\u00b6","text":"<p>Languages like Python, Java, and C++ are easier to to read, write, and understand. Python, in particular, is known for being almost like English.</p>"},{"location":"lecture1/#low-level-languages","title":"\ud83d\udd39 Low-Level Languages\u00b6","text":"<p>Languages like Assembly or C are closer to the machine's binary instructions and offer more control. or C. These give you much more control over the computer, but they\u2019re much harder to write and understand.</p>"},{"location":"lecture1/#machine-languages","title":"\ud83d\udd39 Machine Languages\u00b6","text":"<p>It is just pure binary. This is what the computer actually understands. No one can write it directly.</p> <p>In terms of language, machine and human are opposites; the language that is easy for humans to understand is hard for machines to understand, and vice versa.</p>"},{"location":"lecture1/#programming-language-classification","title":"\ud83e\udde9 Programming Language Classification\u00b6","text":""},{"location":"lecture1/#compiled-languages","title":"\ud83d\udd39 Compiled Languages\u00b6","text":"<p>These are translated into machine code before running. Examples: <code>C</code>, <code>Rust</code>, <code>Go</code></p>"},{"location":"lecture1/#interpreted-languages","title":"\ud83d\udd39 Interpreted Languages\u00b6","text":"<p>Executed line-by-line by an interpreter. Examples: <code>Python</code>, <code>JavaScript</code>, <code>Ruby</code></p>"},{"location":"lecture1/#why-are-programming-languages-important","title":"\ud83d\udca1 Why Are Programming Languages Important?\u00b6","text":"<p>Programming languages are the foundation of all software. They allow us to:</p> <ul> <li>Build websites and mobile apps</li> <li>Build AI models</li> <li>Analyze data and run scientific models</li> <li>Create games and simulations</li> <li>Control robots and hardware, etc.</li> </ul> <p>\ud83d\udde3\ufe0f In short: A programming language is how we tell computers what to do.</p>"},{"location":"lecture1/#12-how-python-actually-works-behind-the-scenes","title":"1.2. How Python Actually Works (Behind the Scenes)\u00b6","text":""},{"location":"lecture1/#step-by-step-what-happens-when-you-run-a-python-script","title":"\ud83d\udccc Step-by-Step: What happens when you run a Python script?\u00b6","text":"<ul> <li><p>Step 1: You write code</p> <p>You save a <code>hello.py</code> file with Python code, like:</p> <pre>print(\"Hello, world!\")\n</pre> </li> <li><p>Step 2: The Python Interpreter is invoked</p> <p>When you run a script using <code>python hello.py</code>, the Python interpreter starts up.</p> </li> <li><p>Step 3: Compilation to Bytecode</p> <p>The parse tree is converted into bytecode \u2014 a low-level, intermediate representation of your code. The bytecode is saved as <code>.pyc</code> files inside the <code>__pycache__</code> directory.</p> </li> <li><p>Step 4: Execution by the Python Virtual Machine (PVM)</p> <p>This bytecode gets sent to a PVM (basically a mini-computer inside your computer). The PVM spits out the result in good old binary \u2014 101001 \u2014 so your computer understands what to do.</p> </li> </ul>"},{"location":"lecture1/#python-compiler-interpreter","title":"\u2699\ufe0f Python Compiler (Interpreter)\u00b6","text":"<p>To run a Python script, we only do for Step 1. The Steps 2, 3, and 4 are done through a compiler. There are several Python compiler as follows:</p> Implementation Language Used Performance Compilation Type Platform Integration Notes CPython (default) C Moderate Bytecode (interpreted) Native (cross-platform) Reference implementation; most widely used PyPy RPython High (with JIT) JIT Compilation Cross-platform Much faster for long-running programs Jython Java Moderate Compiled to Java bytecode JVM-based Integrates with Java libraries IronPython C# Moderate Compiled to .NET IL .NET/Mono Works well with C# and .NET libraries MicroPython C Low Interpreted (lightweight) Embedded systems Designed for microcontrollers Brython JavaScript Low Transpiled to JS Web browsers Runs Python in the browser"},{"location":"resources/","title":"Resources","text":"<p>All input files used in the course can be downloaded from our GitHub repository: https://github.com/nguyen-group/CPL/.</p>"},{"location":"resources/#textbook-or-designated-reading","title":"Textbook or Designated Reading:","text":"<ul> <li> <p>Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming, Eric Matthes, 2019</p> </li> <li> <p>Fluent Python: Clear, Concise, and Effective Programming, Luciano Ramalho, 2015</p> </li> <li> <p>Python Data Science Handbook: Essential Tools for Working with Data, Jake Vanderplas, 2017</p> </li> <li> <p>Hands-On Machine Learning with Scikit-Learn and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems, Aurelien Geron, 2017</p> </li> <li> <p>Introduction To Solid State Physics, Charles Kittel, 2004</p> </li> </ul> <p>Note: Additional journal articles, reviews, and materials will be given out in classes.</p>"},{"location":"resources/#other-references","title":"Other References:","text":"<ul> <li> <p>https://github.com/nguyen-group/Neural_Networks_with_Python</p> </li> <li> <p>https://github.com/Asabeneh/30-Days-Of-Python</p> </li> <li> <p>https://github.com/CodeWithHarry/The-Ultimate-Python-Course</p> </li> </ul>"}]}