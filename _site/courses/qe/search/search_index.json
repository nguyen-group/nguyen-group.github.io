{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This course is a solid-state physics and hands-on tutorial for using Quantum ESPRESSO, an open software for quantum calculations for the electronic structure of materials. When we design a new material, the electronic structure calculation is essential to discuss the origin of the material's physical properties, particularly for semiconductors. Nowadays, many researchers and students can run Quantum ESPRESSO on personal computers without paying for the software. Thus, this course is essential for students who want to understand the physics of materials for their experiments or applications. The target of this course is that students can perform physical property calculations of any material on their personal computers.</p> <p>This course is built on our successful workshops and lectures held in several countries since 2016, including Japan, Vietnam, Indonesia, China, Brazil and Taiwan. This course also primarily follows our book \"Quantum ESPRESSO for Solid State Physics\".</p> <p>If you have corrections or suggestions, please raise an comment on our Github.</p>"},{"location":"assignment1/","title":"SCF calculation","text":"<ul> <li>Make scf.in file for the bulk Si with a face\u2010centered\u2010cubic structure (ibrav = 2) and visualize the Si structure by using XCrySDen.</li> <li>Make scf.in file and calculate total energy of monolayer MoS2.</li> </ul>"},{"location":"assignment1/#convergence-test","title":"Convergence test","text":"<ul> <li>Check convergence value of cut\u2010off energy for bulk Si and monolayer MoS2.</li> <li>Check convergence value of k\u2010points grid for bulk Si and monolayer MoS2.</li> </ul>"},{"location":"assignment1/#optimized-structure-calculation","title":"Optimized structure calculation","text":"<ul> <li>Run optimizing atomic positions for monolayer MoS2 by changing position of only Mo atom.</li> <li>Run optimizing unit cell for bulk Si and monolayer MoS2.</li> <li>Calculate lattice constants of bulk Si for several pseudopotential files, and compare the obtained results with the experimental value (0.5431 nm).</li> <li>Plot total energy as a function of smearing energy with different smearing functions for monolayer MoS2.</li> </ul>"},{"location":"assignment2/","title":"Electronic band structure calculation","text":"<ul> <li>Calculate electronic energy dispersion of bulk Si and monolayer MoS2, and compare calculated energy band gaps with the experiment values (1.12 eV and 2.15 eV for bulk Si and monolayer MoS2, respectively).</li> <li>Calculate the DOS of bulk Si and monolayer MoS2.</li> <li>Calculate the contribution of the PDOS of the S and Mo atoms to the total DOS of monolayer MoS2.</li> </ul>"},{"location":"assignment2/#phonon-dispersion-calculation","title":"Phonon dispersion calculation","text":"<ul> <li>Calculate phonon dispersion of graphene without assume_isolated = '2D' option in scf.in, and check if the negative phonon frequency appears for the ZA mode.</li> <li>Calculate phonon dispersion of monolayer MoS2.</li> <li>Calculate contributions of the phonon DOS of the Mo and S atoms to total phonon DOS of monolayer MoS2.</li> </ul>"},{"location":"assignment3/","title":"Optical properties calculation","text":"<ul> <li>Change the values of nbnd and the number of k\u2010points grid in nscf.in to check the convergence of the dielectric function of monolayer MoS2.</li> <li>Change the values of intersmear and check the convergence of the dielectric function of monolayer MoS2.</li> </ul>"},{"location":"assignment3/#raman-calculation","title":"Raman calculation","text":"<ul> <li>Calculate the non-resonance Raman spectra of bulk Si.</li> </ul>"},{"location":"assignment3/#qe-generator","title":"QE Generator","text":"<ul> <li>Calculate the electronic and phonon properties of any material you like.</li> </ul>"},{"location":"contents/","title":"Contents","text":"<ol> <li> <p>Introduction </p> <ul> <li>Overview </li> <li>What is DFT</li> <li>What is QE</li> </ul> </li> <li> <p>Productivity tools </p> <ul> <li>Ubuntu command</li> <li>JupyterLab</li> <li>Install QE and JupyterLab on Ubuntu</li> </ul> </li> <li> <p>Hands-on tutorials of QE I: Basics parameters </p> <ul> <li>Total energy and self\u2010consistent field calculations</li> <li>Plane\u2010wave cut\u2010off energy</li> <li>k\u2010points for Brillouin\u2010zone integration</li> <li>Optimizing structure</li> </ul> </li> <li> <p>Hands-on tutorials of QE II: Electronic &amp; Phonon</p> <ul> <li>Energy band-structure calculation</li> <li>Electronic density of states </li> <li>Phonon calculation</li> <li>Phonon density of states  </li> </ul> </li> <li> <p>Hands-on tutorials of QE III: Wannier90 &amp; Optic</p> <ul> <li>Wannier90 for graphene </li> <li>Optical properties</li> <li>Raman calculations   </li> </ul> </li> <li> <p>Hands-on tutorials of QE IV: Input generator</p> <ul> <li>How to make vc-relax from a CIF file</li> <li>Energy band structure</li> <li>Phonon calculation</li> </ul> </li> </ol>"},{"location":"lecture1/","title":"1. Introduction: DFT and QE","text":""},{"location":"lecture1/#1-introduction-dft-and-qe","title":"1. Introduction: DFT and QE\u00b6","text":""},{"location":"lecture1/#11-getting-started","title":"1.1. \ud83d\udc4b Getting started\u00b6","text":"<p>Welcome to our first lecture!</p>"},{"location":"lecture1/#111-what-is-dft","title":"1.1.1. What is DFT?\u00b6","text":"<p>Density Functional Theory (DFT) is a computational quantum mechanical method used to calculate the ground state of the electronic structure of many-body systems, particularly atoms, molecules, and solids. Unlike traditional quantum mechanics methods, which solve the Schr\u00f6dinger equation for the many-electron wavefunction, DFT simplifies the problem by focusing on the electron density (in 3 dimensions) rather than the wavefunction (in $3N$ dimensions for $N$ electrons).</p>"},{"location":"lecture1/#112-functional","title":"1.1.2. Functional\u00b6","text":"<p>A functional is a function whose argument is itself a function. $f(x)$ is a function of the variable $x$ while $F[f]$ is a functional of the function $f$. $$ y = f(x) $$ $f$ is a function, it takes a number $x$ as input and output $y$ is also a number. $$ y = F[f(x)] $$ $F$ is a functional it takes function $f(x)$ as input and output $y$ is a number.</p>"},{"location":"lecture1/#13-functionals-in-dft","title":"1.3. Functionals in DFT\u00b6","text":"<p>The term \"functional\" in DFT comes from the fact that the total energy is calculated from the electron density function (which is a function of space) through the use of various functionals that describe different aspects of the system's energy.</p>"},{"location":"lecture1/#12-hohenberg-kohn-theorem","title":"1.2. Hohenberg-Kohn Theorem\u00b6","text":"\ud83d\udcd3 Reference: P. Hohenberg and W. Kohn, Inhomogeneous electron gas, Phys. Rev. 136, B864 (1964).  Theorem: There is a one\u2010to\u2010one correspondence between an external potential $\\mathcal{V}_{en}(\\textbf{r})$ and an electron density $n(\\textbf{r})$.  <p>Since the Hamiltonians is determined by the external potential, the Hohenberg-Kohn theorem tell us the two different Hamiltonian cannot have the same ground-state electron density. The theorem leads to two important consequences:</p> Corollary 1: The electron density $n(\\textbf{r})$ uniquely specifies the external potential $\\mathcal{V}_{en}(\\textbf{r})$ and hence the Hamiltonian $\\mathcal{H}$.  <p>The Schr\u00f6dinger equation says how we can get the wavefunction from a given potential. Once solved the wavefunction (which could be difficul due to the high\u2010dimensional partial differential equation), we can determine the density or any other properties. Now Corollary 1 says the opposite is also true. For a given density, the potential can be uniquely determined. Thus, it is possible to define the ground-state energy as a function of electronic density.</p> Corollary 2: The ground-state total energy can be obtained by minimizing an energy functional $E[n(\\textbf{r})]$ with respect to the electron density $n(\\textbf{r})$.  <p>The ground state energy can therefore be found by minimizing $E[n(\\textbf{r})]$ instead of solving for the many-electron wavefunction. However, the Hohenberg-Kohn theorems do not tell us how the energy depends on the electron density. It is noted that the DFT can have an exact solution if and only if $E[n(\\textbf{r})]$ is known exactly. In reality, apart from some special cases, the exact $E[n(\\textbf{r})]$ is unknown and only approximate functionals are used.</p>"},{"location":"lecture1/#13-kohn-sham-equation","title":"1.3. Kohn-Sham equation\u00b6","text":"\ud83d\udcd3 Reference: P. Hohenberg and W. Kohn, Self-consistent equations including exchange and correlation effects, Phys. Rev. 140, A1133  (1965).  <p>For any system of $N$ interacting electrons in a given external potential $\\mathcal{V}_{en} (\\textbf{r})$ (i.e., Coulomb attraction between electrons and nuclei), there is a \"virtual system\" of $N$ non-interacting electrons with exactly the same density as the interacting one. The non-interacting electrons subjected to a effective external potential $\\mathcal{V}_{eff} (\\textbf{r})$ as: $$ \\left[-\\frac{\\hbar^2 \\nabla^2}{2m} + \\mathcal{V}_{eff}(\\textbf{r}) \\right] \\psi_i(\\textbf{r}) = \\epsilon_i \\psi_i(\\textbf{r}), $$ where the effective external potential is given by: $$ \\mathcal{V}_{eff}(\\textbf{r}) = \\mathcal{V}_{en}(\\textbf{r}) + \\mathcal{V}_{H}(\\textbf{r}) + \\mathcal{V}_{xc}(\\textbf{r}), $$ where the Hartree potential, which describes electrostatic interaction of electronic cloud, is defined by: $$ \\mathcal{V}_{H}(\\textbf{r}) = \\int \\frac{n(\\textbf{r})}{|\\textbf{r} - \\textbf{r}'|} \\mathrm{d}\\textbf{r}', $$ and the electron density is given by: $$ n(\\textbf{r}) = \\sum_i f_i |\\psi_i (\\textbf{r})|^2, $$ where $f_i$ is the occupation factor of electrons ($0 \\le f_i \\le 1$). The Kohn-Sham equation looks like single particle Schr\u00f6dinger equation, however $\\mathcal{V}_{H}(\\textbf{r})$ and $\\mathcal{V}_{xc}(\\textbf{r})$ (exchange-correlation potential, it includes all the remaining/unknown energy corrections) terms depend on $n(\\textbf{r})$ i.e., on $\\psi_i$ which in turn depends on $\\mathcal{V}_{en}(\\textbf{r})$. Therefore the problem is non-linear. It is usually solved computationally by starting from a trial potential and iterate to self-consistency</p>"},{"location":"lecture1/#131-self-consistent-solution","title":"1.3.1. Self-Consistent Solution\u00b6","text":"<p>The Kohn-Sham equations are solved iteratively:</p> <ul> <li>Guess $n(\\textbf{r})$.</li> <li>Calculate $\\mathcal{V}_{eff}(\\textbf{r})$.</li> <li>Solve for $\\psi_i$ and update $n(\\textbf{r}) = \\sum_i f_i |\\psi_i (\\textbf{r})|^2$.</li> <li>Repeat until convergence.</li> </ul>"},{"location":"lecture1/#14-exchange-correlation-functional","title":"1.4. Exchange-correlation functional\u00b6","text":""},{"location":"lecture1/#141-local-density-approximation-lda","title":"1.4.1. Local Density Approximation (LDA)\u00b6","text":"\ud83d\udcd3 Reference: J. P. Perdew and A. Zunger, Self-interaction correction to density-functional approximations for many-electron systems, Phys. Rev. B 23, 5048 (1981).  <p>The LDA is a widely used approximation the exchange-correlation energy of a system by assuming that the electronic density varies slowly and treating the local density as a uniform electron gas. In this case, the exchange-correlation energy at each point in space as being the same as that of a uniform electron gas with the same electron density at that point. Thus, the LDA is given by:</p> <p>$$ E_{xc} = \\int n(\\textbf{r}) \\epsilon_{xc}(n(\\textbf{r})) d\\textbf{r} $$ and $$ \\mathcal{V}_{xc}(\\textbf{r}) = \\epsilon_{xc}(n(\\textbf{r})) + n(\\textbf{r})\\frac{d\\epsilon_{xc}(n)}{dn}\\bigg\\rvert_{n=n(\\textbf{r})}, $$ where $\\epsilon_{xc}(n)$ is the exchange-correlation energy per electron, which is obtained for the homogeneous electron gas of density $n$ (using Quantum Monte Carlo techniques) and fitted to some analytic form. LDA is computationally cheap compared to more advanced functionals, making it useful for large systems. However, the LDA can lead to inaccuracies in systems with rapidly varying densities (e.g., strongly correlated materials, surfaces, etc.).</p>"},{"location":"lecture1/#142-generalized-gradient-approximation-gga","title":"1.4.2. Generalized Gradient Approximation (GGA)\u00b6","text":"\ud83d\udcd3 Reference: J. P. Perdew, K. Burke, and M. Ernzerhof, Generalized gradient approximation made simple, Phys. Rev. Lett. 77, 3865 (1997).  <p>The GGA is one of the approximations to the exchange-correlation energy functional, which improves the accuracy of exchange-correlation energy functionals by incorporating density gradients, going beyond the LDA. Thus, the GGA depends on both the local density and the local gradient of the density as: $$ E_{xc} = \\int n(\\textbf{r}) \\epsilon_{GGA}(n(\\textbf{r}), |\\nabla n(\\textbf{r})|) d\\textbf{r}. $$</p> <p>Unlike LDA, GGA considers how the electron density varies in space, improving accuracy for inhomogeneous systems. However, both the LDA and GGA underestimate band gaps in semiconductors and insulators and often fail for van der Waals (dispersion) interactions. In oder to solve these issues, there are more advanced functionals: Meta-GGA (e.g., SCAN), hybrids (e.g., B3LYP), nonlocal functionals for van der Waals forces, Grimme's DFT+D (a semi-empirical correction to GGA). They usually produces more accurate result, but computationally more expensive and sometimes numerically unstable.</p>"},{"location":"lecture1/#15-quantum-espresso","title":"1.5. Quantum ESPRESSO\u00b6","text":"<p>Quantum ESPRESSO (QE) is one of the most used packages for first\u2010principles calculations with the DFT, and it has been developing continuously; thanks to its open\u2010source and excellent community support. The abbreviation ESPRESSO stands for \u201cESPRESSO = opEn Source Package for Research in Electronic Structure, Simulation, and Optimization.\u201d It is completely FREE and easily installed on many platforms.</p> <p>We can install QE on our personal laptops or desktops to run relatively less computationally intensive calculations. In particular, the almost of hands-on tutorials in this course can be run on a personal laptop. However, if we intend to perform computationally heavy tasks, we will need access to better computing resources with a larger number of CPU (or GPU) cores, memory, bandwidth, and disk IO.</p>"},{"location":"lecture1/#151-installing-qe-on-ubuntu","title":"1.5.1. Installing QE on Ubuntu\u00b6","text":"<p>Easiest way to install Quantum Espresso is from the package manager of respective Ubuntu distribution. This should work fine for us and this is recommended option for this course. Following commands are for Ubuntu/Debian:</p> <ul> <li>Update list of repositories and upgrade the system</li> </ul> <pre>$ sudo apt update &amp;&amp; sudo apt upgrade -y\n</pre> <ul> <li>Important development tools and libraries: Git, wget, gcc/g++/gfortran, LAPACK, FFTW, openmpi (mpirun)</li> </ul> <pre>$ sudo apt install git wget build-essential -y\n$ sudo apt install g++ gfortran -y\n$ sudo apt install liblapack-dev libfftw3-dev libopenmpi-dev -y\n</pre> <ul> <li>Quantum ESPRESSO and Wannier90 from apt repository</li> </ul> <pre>$ sudo apt install quantum-espresso wannier90 -y\n</pre> <ul> <li>Additional tools</li> </ul> <pre>$ sudo apt install xcrysden gnuplot -y\n$ sudo apt install python3-dev jupyter-server -y\n$ sudo apt install python3-numpy python3-scipy python3-sympy python3-matplotlib -y\n</pre>"},{"location":"lecture1/#152-installing-qe-on-windows","title":"1.5.2. Installing QE on Windows\u00b6","text":"<p>For Windows, we recommend to use Windows subsystem for Linux (WSL) as follows:</p> <ul> <li>Open PowerShell as Administrator and run:</li> </ul> <pre>$ wsl --install\n</pre> <ul> <li><p>Restart your computer if needed.</p> </li> <li><p>Open the \"Windows Terminal\" and install a Linux distribution (Ubuntu is recommended).</p> </li> <li><p>Install QE for Ubuntu as shown above.</p> </li> </ul> <p>A Youtube video (not made by us) shows how to Quantum ESPRESSO 7.4 on Windows 11 (WSL2).</p>"},{"location":"lecture1/#153-installing-qe-on-macos","title":"1.5.3. Installing QE on MacOS\u00b6","text":"<p>We do not recommend using QE on macOS. I tested it on my MacBook Pro M1 and found it to be unstable. However, if you wish to install QE on a MacOS, you can refer to https://github.com/nguyen-group/QE-SSP/discussions/9.</p>"},{"location":"lecture1/#154-obtaining-example-files-for-this-course","title":"1.5.4. Obtaining example files for this course\u00b6","text":"<p>We provide example input/output files of QE calculations on the GitHub. You can download them by using the following command:</p> <pre>$ git clone https://github.com/nguyen-group/QE-SSP.git\n</pre>"},{"location":"lecture1/#16-exercise","title":"1.6. Exercise\u00b6","text":"<ul> <li>Install QE on your PC.</li> </ul>"},{"location":"lecture1/#17-dive-deeper","title":"1.7. Dive deeper\u00b6","text":"<ul> <li><p>Level 1: Read Chapter 4 of \"Quantum ESPRESSO for Solid State Physics\" book for understanding DFT.</p> </li> <li><p>Level 2: Install Intel OneAPI Base Toolkit, then install QE with Intel MKL for optimized performance.</p> </li> </ul>"},{"location":"lecture2/","title":"2. Productivity tools: Linux and JupyterLab","text":""},{"location":"lecture2/#2-productivity-tools-linux-and-jupyterlab","title":"2. Productivity tools: Linux and JupyterLab\u00b6","text":""},{"location":"lecture2/#21-ubuntu","title":"2.1. Ubuntu\u00b6","text":"<p>Ubuntu is a popular, free, and open-source operating system based on the Linux kernel.</p>"},{"location":"lecture2/#211-how-to-download-and-install-ubuntu","title":"2.1.1. How to download and install Ubuntu\u00b6","text":""},{"location":"lecture2/#step-1-download-ubuntu-iso","title":"Step 1: Download Ubuntu ISO\u00b6","text":"<ul> <li>Go to the official Ubuntu website: https://ubuntu.com/download</li> <li>Choose the version you want (e.g., Ubuntu Desktop LTS or Ubuntu Server)</li> <li>Click Download to get the <code>.iso</code> file</li> </ul>"},{"location":"lecture2/#step-2-create-a-bootable-usb-drive","title":"Step 2: Create a Bootable USB Drive\u00b6","text":"<ul> <li>A USB stick with at least 8 GB capacity</li> <li>Bootable USB Live by a tool like Rufus (for Windows) or <code>balenaEtcher</code> (for Mac/Linux)</li> </ul>"},{"location":"lecture2/#step-3-boot-from-usb","title":"Step 3: Boot From USB\u00b6","text":"<ol> <li>Insert the bootable USB into the target computer</li> <li>Restart the computer</li> <li>Enter BIOS/UEFI (usually by pressing <code>F2</code>, <code>F12</code>, <code>DEL</code>, or <code>ESC</code>)</li> <li>Set the USB drive as the primary boot device</li> <li>Save and exit</li> </ol>"},{"location":"lecture2/#step-4-install-ubuntu","title":"Step 4: Install Ubuntu\u00b6","text":"<ol> <li>Choose \"Install Ubuntu\" when the menu appears</li> <li>Select your language, keyboard layout, and other preferences</li> <li>Choose installation type:<ul> <li>Erase disk and install Ubuntu</li> <li>Install alongside existing OS</li> <li>Something else (for custom partitions)</li> </ul> </li> <li>Follow prompts to set username, password, and location</li> <li>Wait for installation to complete</li> <li>Reboot when prompted, remove the USB</li> </ol>"},{"location":"lecture2/#step-5-post-installation-optional","title":"Step 5: Post-Installation (Optional)\u00b6","text":"<ul> <li>Update system:</li> </ul> <pre>sudo apt update &amp;&amp; sudo apt upgrade -y\n</pre> <ul> <li>Install Quantum ESPRESSO: See 1.5.1 in Lecture 1: Introduction to DFT with QE</li> </ul>"},{"location":"lecture2/#212-basic-ubuntu-linux-commands","title":"2.1.2. Basic Ubuntu (Linux) commands\u00b6","text":"Command Description Example <code>ls</code> List directory contents <code>ls -la</code> <code>cd</code> Change directory <code>cd /home/user/Documents</code> <code>pwd</code> Print working directory <code>pwd</code> <code>mkdir</code> Create a new directory <code>mkdir new_folder</code> <code>rm</code> Remove files or directories <code>rm file.txt</code> <code>rmdir</code> Remove empty directory <code>rmdir empty_folder</code> <code>cp</code> Copy files or directories <code>cp file1.txt file2.txt</code> <code>mv</code> Move or rename files <code>mv old.txt new.txt</code> <code>touch</code> Create an empty file <code>touch file.txt</code> <code>nano</code> / <code>vim</code> Edit files with a text editor <code>nano file.txt</code> <code>cat</code> Display file contents <code>cat file.txt</code> <code>sudo</code> Run command as superuser <code>sudo apt update</code> <code>apt</code> Package manager for Debian/Ubuntu <code>sudo apt install curl</code> <code>man</code> Display manual for a command <code>man ls</code> <code>chmod</code> Change file permissions <code>chmod +x script.sh</code> <code>chown</code> Change file ownership <code>chown user:user file.txt</code> <code>df</code> Show disk space usage <code>df -h</code> <code>top</code> Show real-time system processes <code>top</code> <code>ps</code> Show running processes <code>ps aux</code> <code>kill</code> Terminate a process by PID <code>kill 1234</code>"},{"location":"lecture2/#213-basic-quantum-espresso-qe-commands","title":"2.1.3. Basic Quantum ESPRESSO (QE) commands\u00b6","text":"Command Description Example <code>pw.x</code> Runs the Plane-Wave Self-Consistent Field (SCF) code <code>pw.x &lt; scf.in &gt; scf.out</code> <code>dos.x</code> Computes Density of States <code>dos.x &lt; dos.in &gt; dos.out</code> <code>projwfc.x</code> Projects wavefunctions (for PDOS) <code>projwfc.x &lt; projwfc.in &gt; projwfc.out</code> <code>bands.x</code> Computes band structure from saved data <code>bands.x &lt; bands.in &gt; bands.out</code> <code>ph.x</code> Runs phonon calculations <code>ph.x &lt; ph.in &gt; ph.out</code> <code>q2r.x</code> Converts dynamical matrices from q to real space <code>q2r.x &lt; q2r.in &gt; q2r.out</code> <code>matdyn.x</code> Calculates phonon dispersion and DOS <code>matdyn.x &lt; matdyn.in &gt; matdyn.out</code> <code>pp.x</code> Post-processing (e.g., charge density visualization) <code>pp.x &lt; pp.in &gt; pp.out</code> <code>mpirun -np N pw.x</code> Run SCF with MPI on N cores <code>mpirun -np 8 pw.x &lt; scf.in &gt; scf.out</code> <code>pw.x -in input.in</code> Alternate input format (no I/O redirection) <code>pw.x -in scf.in</code>"},{"location":"lecture2/#22-jupyterlab-on-ubuntu","title":"2.2. JupyterLab on Ubuntu\u00b6","text":""},{"location":"lecture2/#221-what-is-jupyterlab","title":"2.2.1. What is JupyterLab?\u00b6","text":"<p>JupyterLab is a next-generation web-based interactive development environment for notebooks, code, and data. It's an evolution of the classic Jupyter Notebook, with support for:</p> <ul> <li>Multiple documents and editors (notebooks, terminals, text files, etc.)</li> <li>Drag-and-drop interface</li> <li>Rich extensions and themes</li> </ul> <p>Great for data science, machine learning, scientific computing, and research.</p>"},{"location":"lecture2/#223-how-to-install-jupyterlab-on-ubuntu","title":"2.2.3. How to Install JupyterLab on Ubuntu\u00b6","text":""},{"location":"lecture2/#step-1-update-your-system","title":"Step 1: Update Your System\u00b6","text":"<pre>$ sudo apt update &amp;&amp; sudo apt upgrade -y\n</pre>"},{"location":"lecture2/#step-2-install-python-and-pip","title":"Step 2: Install Python and Pip\u00b6","text":"<pre>$ sudo apt install python3 python3-pip -y\n</pre>"},{"location":"lecture2/#step-4-install-jupyterlab","title":"Step 4: Install JupyterLab\u00b6","text":"<pre>$ pip install jupyterlab\n</pre>"},{"location":"lecture2/#step-5-additional-python-scientific-libraries","title":"Step 5: Additional Python scientific libraries\u00b6","text":"<pre>$ pip install numpy scipy sympy matplotlib\n</pre> <ul> <li>numpy: numerical computing with arrays</li> <li>scipy: scientific computing, linear algebra, optimization, etc.</li> <li>sympy: symbolic mathematics (like algebra, calculus, equation solving)</li> <li>matplotlib: plotting and data visualization</li> </ul>"},{"location":"lecture2/#step-6-optional-jupyterlab-extensions","title":"Step 6 (optional): JupyterLab extensions\u00b6","text":"<pre>$ pip install nodejs\n</pre> <ul> <li>nodejs: an open-source, cross-platform environment for running JavaScript applications. Some extensions might require a rebuild of JupyterLab upon installation. This rebuild process relies on Node.js.</li> </ul>"},{"location":"lecture2/#224-how-to-use-jupyterlab","title":"2.2.4. How to Use JupyterLab\u00b6","text":""},{"location":"lecture2/#step-1-start-jupyterlab","title":"Step 1: Start JupyterLab\u00b6","text":"<pre>$ jupyter lab\n</pre> <ul> <li>This will launch JupyterLab in your browser at <code>http://localhost:8888</code></li> <li>A token will be printed in the terminal if not previously configured</li> </ul>"},{"location":"lecture2/#step-2-create-notebooks-or-scripts","title":"Step 2: Create Notebooks or Scripts\u00b6","text":"<ul> <li>Use the launcher interface to open:<ul> <li>Python notebooks</li> <li>Markdown files</li> <li>Terminal sessions</li> <li>Text/code editors</li> </ul> </li> </ul>"},{"location":"lecture2/#step-3-stop-jupyterlab","title":"Step 3: Stop JupyterLab\u00b6","text":"<ul> <li>Press <code>Ctrl+C</code> in the terminal where it's running</li> <li>Type <code>y</code> and press <code>Enter</code> to confirm shutdown</li> </ul>"},{"location":"lecture2/#23-jupyterlab-on-visual-studio-code-vs-code","title":"2.3. JupyterLab on Visual Studio Code (VS Code)\u00b6","text":""},{"location":"lecture2/#231-what-is-visual-studio-code-vs-code","title":"2.3.1. What is Visual Studio Code (VS Code)?\u00b6","text":"<p>Visual Studio Code (VS Code) is a free, open-source, and lightweight code editor developed by Microsoft. It is widely used by developers for writing, editing, debugging, and deploying code across many programming languages and platforms.</p>"},{"location":"lecture2/#232-install-visual-studio-code-on-ubuntu","title":"2.3.2: Install Visual Studio Code on Ubuntu\u00b6","text":""},{"location":"lecture2/#method-1-install-via-apt-recommended","title":"Method 1: Install via <code>apt</code> (Recommended)\u00b6","text":"<pre>$ sudo apt update\n$ sudo apt install wget gpg -y\n$ wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\n$ sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/\n$ sudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] \\\nhttps://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\n\n$ sudo apt update\n$ sudo apt install code\n</pre>"},{"location":"lecture2/#method-2-install-from-deb-file","title":"Method 2: Install from .deb File\u00b6","text":"<ul> <li>Download <code>.deb</code> from: https://code.visualstudio.com/</li> <li>Install with:</li> </ul> <pre>$ sudo dpkg -i code_*.deb\n$ sudo apt --fix-broken install\n</pre>"},{"location":"lecture2/#233-install-jupyter-extension-in-vs-code","title":"2.3.3: Install Jupyter Extension in VS Code\u00b6","text":"<ol> <li>Open VS Code</li> <li>Go to the Extensions tab (or press <code>Ctrl+Shift+X</code>)</li> <li>Search for \"Jupyter\" (by Microsoft)</li> <li>Click Install</li> </ol>"},{"location":"lecture2/#234-run-jupyter-notebooks-in-vs-code","title":"2.3.4. Run Jupyter Notebooks in VS Code\u00b6","text":""},{"location":"lecture2/#option-1-create-a-new-notebook","title":"Option 1: Create a New Notebook\u00b6","text":"<ul> <li>Press <code>Ctrl+Shift+P</code>, search <code>Jupyter: Create New Blank Notebook</code></li> <li>Choose a kernel (Python 3, etc.)</li> </ul>"},{"location":"lecture2/#option-2-open-an-existing-ipynb-file","title":"Option 2: Open an Existing <code>.ipynb</code> File\u00b6","text":"<ul> <li>File \u2192 Open File \u2192 select your <code>.ipynb</code> notebook</li> <li>You\u2019ll see interactive cells inside VS Code</li> </ul>"},{"location":"lecture2/#16-exercise","title":"1.6. Exercise\u00b6","text":"<ul> <li>Practice with Linux command line and JupyterLab on your PC.</li> </ul>"},{"location":"lecture2/#17-dive-deeper","title":"1.7. Dive deeper\u00b6","text":"<ul> <li><p>Level 1: Read Chapter 6 of \"Quantum ESPRESSO for Solid State Physics\" book for Linux commands.</p> </li> <li><p>Level 2: Install and run JupyterLab on VSCode.</p> </li> </ul>"},{"location":"lecture3/","title":"3. Hands-on tutorials of QE I: Basics parameters","text":""},{"location":"lecture3/#3-hands-on-tutorials-of-qe-i-basics-parameters","title":"3. Hands-on tutorials of QE I: Basics parameters\u00b6","text":""},{"location":"lecture4/","title":"4. Hands-on tutorials of QE II: Electron &amp; Phonon","text":""},{"location":"lecture4/#4-hands-on-tutorials-of-qe-ii-electron-phonon","title":"4. Hands-on tutorials of QE II: Electron &amp; Phonon\u00b6","text":""},{"location":"lecture5/","title":"5. Hands-on tutorials of QE III: Wannier90 &amp; Optic","text":""},{"location":"lecture5/#5-hands-on-tutorials-of-qe-iii-wannier90-optic","title":"5. Hands-on tutorials of QE III: Wannier90 &amp; Optic\u00b6","text":""},{"location":"lecture6/","title":"6. Hands-on tutorials of QE IV: Input generator","text":""},{"location":"lecture6/#6-hands-on-tutorials-of-qe-iv-input-generator","title":"6. Hands-on tutorials of QE IV: Input generator\u00b6","text":""},{"location":"resources/","title":"Resources","text":"<p>This course primarily follows our book: </p> <p>N. T. Hung, A. R. T. Nugraha and R. Saito, Quantum ESPRESSO Course for Solid\u2011State Physics, Jenny Stanford Publishing, New York, 372 Pages, (2022).</p> <p>We strongly recommend referring to it for a deeper understanding of the concepts covered in the lectures.</p> <p>All input files used in the course can be downloaded from our GitHub repository: https://github.com/nguyen-group/QE-SSP/.</p>"},{"location":"resources/#documents","title":"Documents","text":"<ul> <li> <p>Input description of pw.x</p> </li> <li> <p>Input description of bands.x</p> </li> <li> <p>Input description of dos.x</p> </li> <li> <p>Input description of pp.x</p> </li> <li> <p>Input description of dynmat.x</p> </li> <li> <p>Input description of matdyn.x</p> </li> <li> <p>Input description of q2r.x</p> </li> <li> <p>Input description of Wannier90</p> </li> </ul>"},{"location":"resources/#workshops","title":"Workshops","text":"<ul> <li> <p>Electronic-structure simulations for user communities at large-scale facilities, Europe/Zurich, 3\u20139 Apr 2025.</p> </li> <li> <p>2024 School on Electron-Phonon Physics, Many-Body Perturbation Theory, and Computational Workflows, Austin, TX, 10-16 June 2024.</p> </li> <li> <p>Advanced Quantum ESPRESSO school: Hubbard and Koopmans functionals from linear response, University of Pavia, Pavia (Italy), Aug 28 \u2013 Sep 01, 2023.</p> </li> <li> <p>Efficient materials modelling on HPC with QUANTUM ESPRESSO, Yambo and BigDFT, EuroCC National Competence Center Sweden, Nov 14-17, 2022.</p> </li> <li> <p>Hubbard-Koopmans tutorial, Nov 9-11, 2022.</p> </li> <li> <p>MaX e-School on Advanced Materials and Molecular Modelling with Quantum ESPRESSO, May 17-28, 2021.</p> </li> <li> <p>Summer school on Advanced Materials and Molecular Modelling with Quantum ESPRESSO, Ljubljana, Slovenia, September 15-20 2019.</p> </li> </ul>"},{"location":"resources/#other-resources","title":"Other resources","text":"<ul> <li> <p>Quantum Espresso Tutorial</p> </li> <li> <p>Hands-on: 4 EASY install of Quantum Espresso on Ubuntu</p> </li> <li> <p>Installing quantum espresso</p> </li> </ul>"}]}