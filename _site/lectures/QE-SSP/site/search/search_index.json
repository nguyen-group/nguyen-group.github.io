{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This course is a solid-state physics and hands-on tutorial for using Quantum ESPRESSO, an open software for quantum calculations for the electronic structure of materials. When we design a new material, the electronic structure calculation is essential to discuss the origin of the material's physical properties, particularly for semiconductors. Nowadays, many researchers and students can run Quantum ESPRESSO on personal computers without paying for the software. Thus, this course is essential for students who want to understand the physics of materials for their experiments or applications.</p> <p>If you have corrections or suggestions, please raise an comment on Github.</p>"},{"location":"contents/","title":"Contents","text":"<ol> <li> <p>Introduction </p> <ul> <li>Overview </li> <li>What is DFT</li> <li>Install QE</li> <li>Exercise: Getting started </li> </ul> </li> <li> <p>Productivity tools </p> <ul> <li>Ubuntu command</li> <li>JupyterLab</li> <li>Exercise: Crystal hardness </li> </ul> </li> <li> <p>Hands-on tutorials of QE I: Basics parameters </p> <ul> <li>Terminology</li> <li>Learning by example<ul> <li>Supervised</li> <li>Unsupervised</li> <li>Reinforcement</li> </ul> </li> <li>Exercise: Crystal hardness </li> </ul> </li> <li> <p>Hands-on tutorials of QE II: Electronic properties</p> <ul> <li>Data sources and formats</li> <li>API queries </li> <li>Exercise: Data-driven thermoelectrics </li> </ul> </li> <li> <p>Hands-on tutorials of QE III: Phonon properties</p> <ul> <li>Compositional </li> <li>Structural</li> <li>Graphs   </li> <li>Exercise: Navigating crystal space </li> </ul> </li> <li> <p>Hands-on tutorials of QE IV: Optical properties</p> <ul> <li>k-nearest neighbours</li> <li>k-means clustering</li> <li>Decision trees and beyond</li> <li>Exercise: Metal or insulator? </li> </ul> </li> <li> <p>Hands-on tutorials of QE V: Subjects for 2D materials</p> <ul> <li>From neuron to perceptron</li> <li>Network architecture and training</li> <li>Convolutional neural networks   </li> <li>Exercise: Learning microstructure </li> </ul> </li> <li> <p>Hands-on tutorials of QE VI: Wannier90</p> <ul> <li>Data preparation</li> <li>Model choice</li> <li>Training and testing </li> <li>Exercise: Crystal hardness II </li> </ul> </li> <li> <p>Special topic I: QERaman - Raman spectra calculation </p> <ul> <li>Automated experiments </li> <li>Bayesian optimisation</li> <li>Reinforcement learning  </li> <li>Exercise: Closed-loop optimisation </li> </ul> </li> <li> <p>Special topic II: Applications of DFT in materials research </p> <ul> <li>Large language models </li> <li>From latent space to diffusion</li> <li>Exercise: Research challenge </li> </ul> </li> </ol>"},{"location":"lecture1/","title":"1. Introduction","text":"<p>Lecture slides</p> Info: This is an informational note with an equation:       <p> \\( y = x^2 \\) </p> In\u00a0[\u00a0]: Copied! <pre>import numpy as np\n\n# Insert your values\nName = \"No Name\" # Replace with your name\nCID = 123446 # Replace with your College ID (as a numeric value with no leading 0s)\n\n# Set a random seed using the CID value\nCID = int(CID)\nnp.random.seed(CID)\n\n# Print the message\nprint(\"This is the work of \" + Name + \" [CID: \" + str(CID) + \"]\")\n</pre> import numpy as np  # Insert your values Name = \"No Name\" # Replace with your name CID = 123446 # Replace with your College ID (as a numeric value with no leading 0s)  # Set a random seed using the CID value CID = int(CID) np.random.seed(CID)  # Print the message print(\"This is the work of \" + Name + \" [CID: \" + str(CID) + \"]\") In\u00a0[\u00a0]: Copied! <pre>#Empty block for your answers\n</pre> #Empty block for your answers    In\u00a0[\u00a0]: Copied! <pre>#Empty block for your answers\n</pre> #Empty block for your answers    \ud83d\udcd3 Submission: When your notebook is complete in Google Colab, go to File &gt; Download and choose <code>.ipynb</code>. The completed file should be uploaded to Blackboard under assignments for MATE70026."},{"location":"lecture1/#1-introduction","title":"1. Introduction\u00b6","text":""},{"location":"lecture1/#getting-started","title":"\ud83d\udc4b Getting started\u00b6","text":"<p>Welcome to our first lecture!</p>"},{"location":"lecture1/#functional","title":"Functional\u00b6","text":"<p>A functional is a function whose argument is itself a function. $f(x)$ is a function of the variable $x$ while $F[f]$ is a functional of the function $f$. $$ y = f(x) $$ $f$ is a function, it takes a number $x$ as input and output $y$ is also a number. $$ y = F[f(x)] $$ $F$ is a functional it takes function $f(x)$ as input and output $y$ is a number.</p>"},{"location":"lecture1/#hohenberg-kohn-theorem-1","title":"Hohenberg-Kohn Theorem 1\u00b6","text":"<p>The ground state density $n(\\textbf{r})$ determines the external potential energy $v(\\textbf{r})$ to within a trivial additive constant.</p> <p>So what Hohenberg-Kohn theorem says, may not sound very trivial. Schr\u00f6dinger equation says how we can get the wavefunction from a given potential. Once solved the wavefunction (which could be difficult), we can determine the density or any other properties. Now Hohenberg and Kohn theorem says the opposite is also true. For a given density, the potential can be uniquely determined. For non-degenerate ground states, two different Hamiltonian cannot have the same ground-state electron density. It is possible to define the ground-state energy as a function of electronic density.</p>"},{"location":"lecture1/#hohenberg-kohn-theorem-2","title":"Hohenberg-Kohn Theorem 2\u00b6","text":"<p>Total energy of the system $E(n)$ is minimal when $n(\\textbf{r})$ is the</p> <p>actual ground-state density, among all possible electron densities.</p> <p>The ground state energy can therefore be found by minimizing $E(n)$ instead of solving for the many-electron wavefunction. However, note that HK theorems do not tell us how the energy depends on the electron density. In reality, apart from some special cases, the exact $E(n)$ is unknown and only approximate functionals are used.</p> <p>The essence of the HK theorem is that the non-degenerate ground-state wave function is a unique functional of the ground-state density:</p> $$ \\Psi_0(\\textbf{r}_1, \\textbf{r}_2, \\dots, \\textbf{r}_N) = \\Psi[n_0(\\textbf{r})] $$"},{"location":"lecture1/#kohn-sham-hypothesis","title":"Kohn-Sham hypothesis\u00b6","text":"<p>For any system of $N$ interacting electrons in a given external potential</p> <p>$v_{ext} (\\textbf{r})$, there is a virtual system of $N$ non-interacting electrons with exactly the same density as the interacting one. The non-interacting electrons subjected to a different external (single particle) potential.</p> $$ \\left[-\\frac{\\hbar^2 \\nabla^2}{2m} + v_s(\\textbf{r}) \\right] \\psi_i(\\textbf{r}) = \\epsilon_i \\psi_i(\\textbf{r}) $$$$ v_s(\\textbf{r}) = v_{ext}(\\textbf{r}) + e^2 \\int d^3r' \\frac{n(\\textbf{r})}{|\\textbf{r} - \\textbf{r}'|} + v_{xc}(\\textbf{r}; [n]) $$$$ n(\\textbf{r}) = \\sum_i f_i |\\psi_i (\\textbf{r})|^2 $$<p>where $f_i$ is the occupation factor of electrons ($0 \\le f_i \\le 2$). The KS equation looks like single particle Schr\u00f6dinger equation, however $e^2 \\int d^3r' \\frac{n(\\textbf{r})}{|\\textbf{r} - \\textbf{r}'|}$ (the Hartree energy due to electrostatic interaction of electronic cloud) and $v_{xc} (\\textbf{r}; [n])$ (exchange-correlation potential, reminiscence from Hartree-Fock theory, it includes all the remaining/unknown energy corrections) terms depend on $n(\\textbf{r})$ i.e., on $\\psi_i$ which in turn depends on $v_{ext}$. Therefore the problem is non-linear. It is usually solved computationally by starting from a trial potential and iterate to self-consistency. Also note that we have not included the kinetic energy term for the nucleus. This is because the nuclear mass is about three orders of magnitude heavier than the electronic mass ($M \\gg m$), so essentially electronic dynamics is much faster than the nuclear dynamics (see Born-Oppenheimer approximation). Now we are left with the task of solving a non-interacting Hamiltonian.</p> <p>:::info</p> <p>$v_{ext}(\\textbf{r})$ includes the potential energy due to nuclear field, and external electric and magnetic fields if present.</p> <p>:::</p>"},{"location":"lecture1/#exchange-correlation-functional","title":"Exchange-correlation functional\u00b6","text":""},{"location":"lecture1/#local-density-approximation-lda","title":"Local Density Approximation (LDA)\u00b6","text":"<p>Energy functional is a function of the local charge density:</p> $$ E_{xc} = \\int n(\\textbf{r}) \\epsilon_{xc}(n(\\textbf{r})) d\\textbf{r} $$$$ v_{xc}(\\textbf{r}) = \\epsilon_{xc}(n(\\textbf{r})) + n(\\textbf{r})\\frac{d\\epsilon_{xc}(n)}{dn}\\bigg\\rvert_{n=n(\\textbf{r})} $$<p>where $\\epsilon_{xc}(n)$ is obtained for the homogeneous electron gas of density $n$ (using Quantum Monte Carlo techniques) and fitted to some analytic form.</p>"},{"location":"lecture1/#generalized-gradient-approximation-gga","title":"Generalized Gradient Approximation (GGA)\u00b6","text":"<p>These are a family of functionals that depends on the local density and the local gradient of the density:</p> $$ E_{xc} = \\int n(\\textbf{r}) \\epsilon_{GGA}(n(\\textbf{r}), |\\nabla n(\\textbf{r})|) d\\textbf{r} $$<p>There are many flavor of this functional. There are also more advanced functionals: Meta-GGA (e.g., SCAN), hybrids (e.g., B3LYP), nonlocal functionals for van der Waals forces, Grimme's DFT+D (a semi-empirical correction to GGA). They usually produces more accurate result, but computationally more expensive and sometimes numerically unstable.</p>"},{"location":"lecture1/#algorithmic-implementation","title":"Algorithmic implementation\u00b6","text":"<p>We can write our Schr\u00f6dinger in Dirac Bra-Ket notation:</p> $$ \\hat{H} \\ket{\\psi} = E\\ket{\\psi} $$<p>we are going to solve non-interacting single particle Hamiltonian in terms of known basis functions (plane waves) with unknown coefficients. We start with an initial guess for the electron density $n(\\textbf{r})$, and construct a pseudo potential for the nuclear potential. In turn, we have the Hamiltonian. Solve for $\\psi_i(\\textbf{r})$, subsequently $n(\\textbf{r})$, and iterate until self consistency is achieved.</p> <p> Self consistency loop in DFT calculation. The above screenshot was taken from lecture slide of Professor Ralph Gevauer from  ICTP MAX School 2021.</p> <p>The potential due to the ions is replaced by the pseudo potentials which removes the oscillations near the atomic core (reducing number of required plane wave basis vectors) and simulates the exact behavior elsewhere. The pseudo potential is also different for different exchange correlation functional, and it is specified in the pseudo potential file. If a system had more than one type of atom, always choose the pseudo potentials with same exchange correlation (e.g., PBE).</p> <p>It is important to note that DFT is calculations are not exact solution to the real systems because exact functional ($v_{xc}$) we need to solve the Kohn-Sham equation is not known. Therefore, we have to compare the results with experimental observations. The Kohn-Sham wavefunction of orbitals is not an approximation to the exact wavefunction. Rather it is precisely defined property of any electronic system, which is uniquely determined by the density. The in-exactness of DFT results come from the fact that we do not know the exact correlation functional that truly describes real systems.</p>"},{"location":"lecture1/#plane-wave-expansion","title":"Plane-wave expansion\u00b6","text":"<p>The wavefunctions are expanded in terms of a basis set. In quantum espresso, the the basis function is plane waves. There exists other DFT codes that use localized basis function as well. Plane waves are simpler but generally requires much large number of them compared to other localized basis sets.</p> $$ \\psi_i(\\textbf{r}) = \\sum_{\\alpha = 1} ^{N_b} c_{i\\alpha} f_{\\alpha}(\\textbf{r}) $$<p>Where $N_b$ is the size basis set. Then the eigenvalue equation becomes:</p> $$ \\sum_{\\beta} \\rm{H}_{\\alpha\\beta} c_{i\\beta} = \\epsilon_i c_{i\\alpha} $$$$ \\Rightarrow \\begin{pmatrix} H_{11} &amp;  ... &amp; H_{1b} \\\\ ... &amp; ... &amp; ... \\\\ H_{b1} &amp; ... &amp; H_{bb} \\end{pmatrix} \\begin{pmatrix} c_1 \\\\ ... \\\\ c_b \\end{pmatrix} = \\epsilon_i \\begin{pmatrix} c_1 \\\\ ... \\\\ c_b \\end{pmatrix} $$<p>This is a linear algebra problem, solving the above involves diagonalization of ($N_b \\times N_b$) matrix which gives us corresponding eigenvalue and eigenfunction.</p> <p>Apart from plane waves, various localized basis set could be used, e.g., Linear Combination of Atomic Orbitals (LCAO), Gaussian-type Orbitals (GTO), Linearized Muffin-Tin Orbitals (LMTO). Once could also consider mixed basis sets, such as the Linearized Augmented Plane Waves (LAPW). Localized sets are smaller in size, they can be used for both finite and periodic systems, however they are difficult to use/calculate.</p> <p>In case of plane waves, we need larger basis set, and requires periodicity. Need to construct supercell for finite systems. Use of pseudopotential reduces the number of required plane waves.</p>"},{"location":"lecture1/#variational-principle","title":"Variational Principle\u00b6","text":"<p>Finding the ground state:</p> $$ E[\\Phi] = \\frac{\\braket{\\Phi | \\hat H | \\Phi}}{\\braket{\\Phi|\\Phi}} $$$$ E[\\Phi] \\ge E_0 $$"},{"location":"lecture1/#bloch-theorem","title":"Bloch theorem\u00b6","text":"$$ \\psi_k(r) = e^{i \\textbf{k} \\cdot \\textbf{r}} u_k(\\textbf{r}) $$$$ u_k(\\textbf{r}) = u_k(\\textbf{r} + \\textbf{R}) $$$$\\textbf{R}$$<p>is lattice vector.</p> <p>Fourier expansion:</p> $$ u_k(\\textbf{r}) = \\frac{1}{\\Omega} \\sum_G c_{\\textbf{k,G}} e^{i \\textbf{G} \\cdot \\textbf{r}} $$$$\\textbf{G}$$<p>is reciprocal lattice vector.</p> $$ \\psi_k(\\textbf{r}) = \\frac{1}{\\Omega} \\sum_G c_{\\textbf{k,G}} e^{i (\\textbf{k + G}) \\cdot \\textbf{r}} $$<p>Contribution from higher Fourier components are small, we can limit the sum at finite $|\\textbf{k + G}|$</p> $$ \\frac{\\hbar^2 |\\textbf{k + G}|}{2m} \\le E_{\\text{cutoff}} $$<p>The charge density can be obtained from:</p> $$ n(\\textbf{r}) = \\sum_k \\psi_k^*(\\textbf{r}) \\psi_k(\\textbf{r}) $$<p>We need two sets of basis vectors: one to store the wavefunctions, and another for the charge density.</p> <p>:::info</p> <p>We need about 4 times the cutoff for the charge density compared to the cutoff for the wavefunction. In case of ultrasoft pseudo potentials, we require a lower cutoff for energy, therefore <code>ecutrho</code> might require 8 or 12 times higher than the <code>ecutwfc</code>.</p> <p>:::</p>"},{"location":"lecture1/#resources","title":"Resources\u00b6","text":"<ul> <li>MIT Course</li> <li>Quantum Espresso Tutorials</li> <li>Introduction to DFT by Paolo Giannozzi</li> <li>http://compmatphys.epotentia.com</li> </ul>"},{"location":"lecture1/#exercise-1","title":"\ud83d\udea8 Exercise 1\u00b6","text":"\ud83d\udca1 Coding exercises: The exercises are designed to apply what you have learned with room for creativity. It is fine to discuss solutions with your classmates, but the actual code should not be directly copied."},{"location":"lecture1/#your-details","title":"Your details\u00b6","text":""},{"location":"lecture1/#problem","title":"Problem\u00b6","text":"<p>Due to their importance in the electronics industry, the diffusion of atoms in semiconductors has been well studied for decades. Below is a set of data for impurity diffusion in crystalline Si [Source: Casey and Pearson (1975)]. It has been arranged into a DataFrame for your convenience.</p> <pre>import pandas as pd\n\ndata = {\n    'Impurity': ['B', 'Al', 'Ga', 'In', 'P', 'As', 'Sb', 'Bi'],\n    'Mass': [10.81, 26.98, 69.72, 114.82, 30.97, 74.92, 121.76, 208.98], # atomic mass in g/mol\n    'D0': [5.1, 8.0, 3.6, 16.5, 10.5, 60.0, 12.9, 1.03E3],  # cm2/sec\n    'Eact': [3.70, 3.47, 3.51, 3.91, 3.69, 4.20, 3.98, 4.63]  # eV\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</pre> <p>Two tasks will be given in class.</p>"},{"location":"lecture1/#dive-deeper","title":"\ud83c\udf0a Dive deeper\u00b6","text":"<ul> <li><p>Level 1: Read Chapter 1 of Machine Learning Refined for a complementary introduction to the field.</p> </li> <li><p>Level 2: Taylor Sparks has a collection of video lectures on Python for Materials Engineers.</p> </li> <li><p>Level 3: If you are a matplotlib pro user, try plotly and bokeh for interactive visualisations.</p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>This course primarily follows our book: N. T. Hung, A. R. T. Nugraha and R. Saito, Quantum ESPRESSO Course for Solid\u2011State Physics, Jenny Stanford Publishing, New York, 372 Pages, (2022).</p> <p>We strongly recommend referring to it for a deeper understanding of the concepts covered in the lectures.</p> <p>All input files used in the course can be downloaded from our GitHub repository: https://github.com/nguyen-group/QE-SSP/.</p>"},{"location":"resources/#documents","title":"Documents","text":"<ul> <li> <p>Input description of pw.x</p> </li> <li> <p>Input description of bands.x</p> </li> <li> <p>Input description of dos.x</p> </li> <li> <p>Input description of pp.x</p> </li> <li> <p>Input description of dynmat.x</p> </li> <li> <p>Input description of matdyn.x</p> </li> <li> <p>Input description of q2r.x</p> </li> <li> <p>Input description of Wannier90</p> </li> </ul>"},{"location":"resources/#workshops","title":"Workshops","text":"<ul> <li> <p>2024 School on Electron-Phonon Physics, Many-Body Perturbation Theory, and Computational Workflows, Austin, TX, 10-16 June 2024.</p> </li> <li> <p>Advanced Quantum ESPRESSO school: Hubbard and Koopmans functionals from linear response, University of Pavia, Pavia (Italy), Aug 28 \u2013 Sep 01, 2023.</p> </li> <li> <p>Efficient materials modelling on HPC with QUANTUM ESPRESSO, Yambo and BigDFT, EuroCC National Competence Center Sweden, Nov 14-17, 2022.</p> </li> <li> <p>Hubbard-Koopmans tutorial, Nov 9-11, 2022.</p> </li> <li> <p>MaX e-School on Advanced Materials and Molecular Modelling with Quantum ESPRESSO, May 17-28, 2021.</p> </li> <li> <p>Summer school on Advanced Materials and Molecular Modelling with Quantum ESPRESSO, Ljubljana, Slovenia, September 15-20 2019.</p> </li> </ul>"},{"location":"resources/#other-resources","title":"Other Resources","text":"<ul> <li> <p>Quantum Espresso Tutorial</p> </li> <li> <p>Hands-on: 4 EASY install of Quantum Espresso on Ubuntu</p> </li> <li> <p>Installing quantum espresso</p> </li> </ul>"}]}